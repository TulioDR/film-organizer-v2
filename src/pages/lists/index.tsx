import Head from "next/head";
import { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import { useUser } from "@clerk/nextjs";
import ListModel from "@/models/listModel";
import StoreModel from "@/models/StoreModel";

import ListCard from "@/components/Pages/Lists/ListCard";
import ListsLoginAdvice from "@/components/Pages/Lists/ListsLoginAdvice";
import ListFinder from "../../components/Pages/Lists/ListFinder";
import NoListsMessage from "../../components/Pages/Lists/NoListsMessage";
import ListsCardsContainer from "@/components/Pages/Lists/ListsCardsContainer";

import ModalPortal from "@/components/Modals/ModalPortal";
import DeleteListModal from "@/components/Modals/DeleteListModal";
import Title from "@/components/Title";

import useRemoveBackgroundImage from "@/hooks/useRemoveBackgroundImage";

export default function Lists() {
   const { user } = useUser();
   const { lists } = useSelector((state: StoreModel) => state.lists);

   const [listToDelete, setListToDelete] = useState<ListModel | null>(null);

   const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
   const openDeleteModal = (list: any) => {
      setIsModalOpen(true);
      setListToDelete(list);
   };
   const closeDeleteModal = () => {
      setIsModalOpen(false);
      setListToDelete(null);
   };
   const [inputValue, setInputValue] = useState<string>("");
   const [filteredLists, setFilteredLists] = useState<any[]>([]);
   useEffect(() => {
      if (!lists) return;
      const founded = lists.filter(({ name }) =>
         name.toLocaleLowerCase().includes(inputValue.toLocaleLowerCase())
      );
      setFilteredLists(founded);
   }, [inputValue, lists]);

   useRemoveBackgroundImage();
   return (
      <div className="px-10 pb-10 overflow-hidden">
         <Head>
            <title>Manage Lists</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
         </Head>
         <Title title="Manage">
            <ListFinder
               onChange={(e) => setInputValue(e.currentTarget.value)}
               value={inputValue}
            />
         </Title>
         {user ? (
            <div>
               {filteredLists.length > 0 ? (
                  <ListsCardsContainer>
                     {filteredLists.map((list) => (
                        <ListCard
                           key={list.id}
                           list={list}
                           openDeleteModal={openDeleteModal}
                        />
                     ))}
                  </ListsCardsContainer>
               ) : (
                  <NoListsMessage />
               )}
            </div>
         ) : (
            <ListsLoginAdvice />
         )}

         <ModalPortal isOpen={isModalOpen}>
            <DeleteListModal
               close={closeDeleteModal}
               listToDelete={listToDelete}
            />
         </ModalPortal>
      </div>
   );
}
