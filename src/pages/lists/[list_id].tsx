import { useEffect, useState } from "react";

import PageTitle from "../../components/PageTitle";
import { SavedMediaModel } from "../../models/MediaModel";

import Head from "next/head";
import { staggerContainer } from "../../animations/StaggerCards";
import { motion } from "framer-motion";

import TransitionPoster from "../../features/transitionPoster/components/TransitionPoster";
import useTransitionPoster from "../../features/transitionPoster/hooks/useTransitionPoster";
import { useSelector } from "react-redux";
import DeleteMediaModal from "@/components/Modals/DeleteMediaModal";
import SavedMediaCard from "@/components/ListDetails/SavedMediaCard";
import MediaTypePills from "@/components/ListDetails/MediaTypePills";
import ListModel from "@/models/listModel";
import StoreModel from "@/models/StoreModel";
import DeleteMediaButtons from "@/components/ListDetails/DeleteMediaButtons";
import ModalPortal from "@/components/Modals/ModalPortal";
import useRemoveBackgroundImage from "@/hooks/useRemoveBackgroundImage";
import { getSpecificList } from "@/api/lists";
import { useRouter } from "next/router";
import { getSavedMedia } from "@/api/media";

type Props = {
   list: ListModel;
};

export default function ListID({}: Props) {
   const { expandSidebar } = useSelector((state: StoreModel) => state.sidebar);

   const [list, setList] = useState<ListModel | null>(null);
   const [media, setMedia] = useState<SavedMediaModel[]>([]);

   const [filteredMedia, setFilteredMedia] = useState<SavedMediaModel[]>([]);
   const [selectedType, setSelectedType] = useState<"movie" | "tv" | "all">(
      "all"
   );
   const [mediaToDelete, setMediaToDelete] = useState<SavedMediaModel[]>([]);

   const [isDeleteOpen, setIsDeleteOpen] = useState<boolean>(false);
   const openDelete = () => {
      setIsDeleteOpen(true);
   };
   const closeDelete = () => {
      setIsDeleteOpen(false);
      setMediaToDelete([]);
   };

   const [isDeleteModalOpen, setIsDeleteModalOpen] = useState<boolean>(false);
   const openDeleteModal = () => {
      setIsDeleteModalOpen(true);
   };
   const closeDeleteModal = () => {
      setIsDeleteModalOpen(false);
   };

   const [isRefreshing, setIsRefreshing] = useState<boolean>(false);
   const refresh = () => setIsRefreshing((prev) => !prev);

   const { query } = useRouter();
   const { list_id } = query;
   useEffect(() => {
      const getMediaListData = async () => {
         const { data: listData } = await getSpecificList(list_id as string);
         setList(listData);
      };
      getMediaListData();
   }, [list_id]);

   useEffect(() => {
      const getMediaOnRefresh = async () => {
         const { data: mediaData } = await getSavedMedia(list_id as string);
         setMedia(mediaData);
      };
      getMediaOnRefresh();
   }, [list_id, isRefreshing]);

   useEffect(() => {
      if (selectedType === "all") {
         setFilteredMedia(media);
      } else {
         const filtered = media.filter(
            ({ media_type }) => media_type === selectedType
         );
         setFilteredMedia(filtered);
      }
   }, [media, selectedType]);

   useRemoveBackgroundImage();
   const {
      selectedImg,
      position,
      setTransitionValues,
      showSpinner,
      onPosterAnimationComplete,
      closePoster,
      isPageHidden,
      hidePage,
   } = useTransitionPoster();

   const title = list?.name || "Film Organizer";
   return (
      <div className="px-10 pb-10 ">
         <Head>
            <title>{title}</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
         </Head>
         <div
            className={`overflow-hidden ${
               isPageHidden ? "opacity-0 duration-300" : ""
            }`}
         >
            {list && (
               <div className="w-full flex items-end justify-between">
                  <PageTitle>{list.name}</PageTitle>
                  <MediaTypePills
                     selectedType={selectedType}
                     setSelectedType={setSelectedType}
                  />
               </div>
            )}
            <motion.div
               variants={staggerContainer}
               initial="initial"
               animate="animate"
               exit="exit"
               className={`gap-5 grid grid-cols-2 md:grid-cols-3 ${
                  expandSidebar
                     ? "lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5"
                     : "lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6"
               }`}
            >
               {filteredMedia.map((media) => (
                  <SavedMediaCard
                     key={media.media_title + media.media_id}
                     media={media}
                     isDeleteOpen={isDeleteOpen}
                     mediaToDelete={mediaToDelete}
                     setMediaToDelete={setMediaToDelete}
                     setTransitionValues={setTransitionValues}
                     hidePage={hidePage}
                  />
               ))}
            </motion.div>
         </div>
         <TransitionPoster
            position={position}
            selectedImg={selectedImg}
            closePoster={closePoster}
            onAnimationComplete={onPosterAnimationComplete}
            showSpinner={showSpinner}
         />
         <DeleteMediaButtons
            mediaToDelete={mediaToDelete}
            isDeleteOpen={isDeleteOpen}
            onClick={isDeleteOpen ? closeDelete : openDelete}
            openDeleteModal={openDeleteModal}
         />
         <ModalPortal isOpen={isDeleteModalOpen}>
            <DeleteMediaModal
               list={list}
               close={closeDeleteModal}
               mediaToDelete={mediaToDelete}
               refresh={refresh}
            />
         </ModalPortal>
      </div>
   );
}
