import { useSupabaseClient } from "@supabase/auth-helpers-react";
import Head from "next/head";
import { useEffect, useState } from "react";
import AppName from "../../components/Auth/AppName";
import AuthBackground from "../../components/Auth/AuthBackground";
import AuthContainer from "../../components/Auth/AuthContainer";
import AuthErrorMessage from "../../components/Auth/AuthErrorMessage";

import SkipButton from "../../components/Auth/SkipButton";
import { GetServerSideProps } from "next";
import { createServerSupabaseClient } from "@supabase/auth-helpers-nextjs";
import SuccessMessage from "@/components/Auth/ResetPassword/SuccessMessage";
import NewPasswordForm from "@/components/Auth/ResetPassword/NewPasswordForm";

export const getServerSideProps: GetServerSideProps = async (context) => {
   const supabase = createServerSupabaseClient(context);
   const { data } = await supabase.auth.getSession();
   if (data.session) {
      return {
         redirect: {
            destination: "/",
            permanent: false,
         },
      };
   }

   return {
      props: {},
   };
};

export default function ResetPassword({}: any) {
   const [showResetPage, setShowResetPage] = useState<boolean>(false);
   const [error, setError] = useState<string | null>(null);
   const supabaseClient = useSupabaseClient();
   const [successMessage, setSuccessMessage] = useState<boolean>(false);

   useEffect(() => {
      supabaseClient.auth.onAuthStateChange((event) => {
         if (event === "PASSWORD_RECOVERY") setShowResetPage(true);
      });
   }, [supabaseClient.auth]);

   const newPasswordHandler = async (values: any) => {
      const { password } = values;
      const { error } = await supabaseClient.auth.updateUser({
         password,
      });
      if (error) setError(error.message);
      else setSuccessMessage(true);
   };

   if (!showResetPage) {
      return (
         <div className="h-screen w-full bg-primary text-text-1 grid place-content-center">
            <div>Loading...</div>
         </div>
      );
   }
   return (
      <div className="relative overflow-hidden">
         <Head>
            <title>Reset Password</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
         </Head>
         <AuthBackground />
         <AuthContainer setError={setError}>
            <div className="space-y-4">
               <AppName />
               <div className="text-light-text-normal">
                  Type your new password
               </div>
               <NewPasswordForm submitHandler={newPasswordHandler} />
               <SkipButton reset />
            </div>
            <SuccessMessage successMessage={successMessage} />
         </AuthContainer>
         <AuthErrorMessage error={error} setError={setError} />
      </div>
   );
}
