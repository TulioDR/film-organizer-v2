import Head from "next/head";
import { useState } from "react";
import { useRouter } from "next/router";
import { GetServerSideProps } from "next";
import { useSupabaseClient } from "@supabase/auth-helpers-react";
import { createServerSupabaseClient } from "@supabase/auth-helpers-nextjs";

import AuthBackground from "../../components/Auth/AuthBackground";
import AuthContainer from "../../components/Auth/AuthContainer";
import FormikForm from "../../components/Auth/AuthForm/FormikForm";

import SkipButton from "../../components/Auth/SkipButton";
import AuthErrorMessage from "../../components/Auth/AuthErrorMessage";
import AuthHeader from "../../components/Auth/AuthHeader";

import SocialLogin from "../../components/Auth/SocialLogin/SocialLogin";
import AppName from "../../components/Auth/AppName";
import EmailSentModal from "@/components/Modals/EmailSentModal";
import ModalPortal from "@/components/Modals/ModalPortal";

export const getServerSideProps: GetServerSideProps = async (context) => {
   // const supabase = createServerSupabaseClient(context);
   // const { data } = await supabase.auth.getSession();
   // if (data.session) {
   //    return {
   //       redirect: {
   //          destination: "/",
   //          permanent: false,
   //       },
   //    };
   // }

   return {
      props: {},
   };
};

export default function Auth() {
   const supabaseClient = useSupabaseClient();
   const router = useRouter();

   const [isLogin, setIsLogin] = useState(true);
   const toggle = () => setIsLogin(!isLogin);

   const [showModal, setShowModal] = useState<boolean>(false);
   const closeModal = () => setShowModal(false);

   const [emailSent, setEmailSent] = useState<string>("");
   const [error, setError] = useState<string | null>(null);

   const loginHandler = async (values: any) => {
      const { email, password } = values;
      const { error } = await supabaseClient.auth.signInWithPassword({
         email,
         password,
      });
      if (error) setError(error.message);
      else router.push("/");
   };

   const signUpHandler = async (values: any, resetForm: any) => {
      const { email, password } = values;
      const { error, data } = await supabaseClient.auth.signUp({
         email,
         password,
      });
      const alreadyExist = data?.user?.identities?.length === 0;
      if (!data.session && !error && !alreadyExist) {
         resetForm();
         setEmailSent(email);
         setShowModal(true);
      }
      if (alreadyExist) setError("User already exist");
      if (error) setError(error.message);
   };

   const forgotPasswordHandler = async (values: any) => {
      const { email } = values;
      const { error } = await supabaseClient.auth.resetPasswordForEmail(email, {
         redirectTo: `${process.env.NEXT_PUBLIC_SITE_URL}/auth/reset-password`,
      });
      if (error) setError(error.message);
      else {
         setEmailSent(email);
         setShowModal(true);
      }
   };

   const [forgotPassWord, setForgotPassword] = useState<boolean>(false);

   return (
      <div className="relative overflow-hidden">
         <Head>
            <title>
               {forgotPassWord
                  ? "Reset Password"
                  : isLogin
                  ? "Login"
                  : "Sing Up"}
            </title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
         </Head>
         <AuthBackground />
         <AuthContainer setError={setError}>
            <div className="space-y-4">
               <AppName />
               <AuthHeader isLogin={isLogin} forgotPassWord={forgotPassWord} />
               {!forgotPassWord && <SocialLogin setError={setError} />}
               <FormikForm
                  isLogin={isLogin}
                  toggleType={toggle}
                  submitHandler={
                     forgotPassWord
                        ? forgotPasswordHandler
                        : isLogin
                        ? loginHandler
                        : signUpHandler
                  }
                  forgotPassWord={forgotPassWord}
                  setForgotPassword={setForgotPassword}
               />
               <SkipButton />
            </div>
         </AuthContainer>
         {/* <ModalPortal isOpen={showModal}> */}
         {/* <EmailSentModal
               close={closeModal}
               email={emailSent}
               forgotPassWord={forgotPassWord}
            /> */}
         {/* </ModalPortal> */}
         <AuthErrorMessage error={error} setError={setError} />
      </div>
   );
}
