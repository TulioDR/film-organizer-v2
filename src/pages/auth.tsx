import Head from "next/head";
import { useState } from "react";
import { useRouter } from "next/router";
import { GetServerSideProps } from "next";
import { useSupabaseClient } from "@supabase/auth-helpers-react";
import { createServerSupabaseClient } from "@supabase/auth-helpers-nextjs";

import AuthBackground from "../components/auth/AuthBackground";
import AuthContainer from "../components/auth/AuthContainer";
import FormikForm from "../components/auth/FormikForm";
import SocialLogin from "../components/auth/SocialLog";
import SkipButton from "../components/auth/SkipButton";
import AuthErrorMessage from "../components/auth/AuthErrorMessage";
import AuthHeader from "../components/auth/AuthHeader";

import linkedin from "../data/images/logos/linkedin.png";
import github from "../data/images/logos/github.png";
import google from "../data/images/logos/google.png";
import ConfirmEmailModal from "../layout/modals/confirmEmail/ConfirmEmailModal";

export const getServerSideProps: GetServerSideProps = async (context) => {
   const supabase = createServerSupabaseClient(context);
   const { data } = await supabase.auth.getSession();
   if (data.session) {
      return {
         redirect: {
            destination: "/",
            permanent: false,
         },
      };
   }

   return {
      props: {},
   };
};

export default function Auth() {
   const supabaseClient = useSupabaseClient();
   const router = useRouter();

   const [isLogin, setIsLogin] = useState(true);
   const toggle = () => setIsLogin(!isLogin);

   const [showModal, setShowModal] = useState<boolean>(false);
   const closeModal = () => setShowModal(false);

   const [emailSent, setEmailSent] = useState<string>("");
   const [error, setError] = useState<string | null>(null);

   const loginHandler = async (values: any) => {
      const { email, password } = values;
      const { error } = await supabaseClient.auth.signInWithPassword({
         email,
         password,
      });
      if (error) setError(error.message);
      else router.push("/");
   };

   const signUpHandler = async (values: any, resetForm: any) => {
      const { email, password } = values;
      const { error, data } = await supabaseClient.auth.signUp({
         email,
         password,
      });
      const alreadyExist = data?.user?.identities?.length === 0;
      if (!data.session && !error && !alreadyExist) {
         resetForm();
         setEmailSent(email);
         setShowModal(true);
      }
      if (alreadyExist) setError("User already exist");
      if (error) setError(error.message);
   };

   const signInWithGoogle = async () => {
      const { error } = await supabaseClient.auth.signInWithOAuth({
         provider: "google",
      });
      if (error) setError(error.message);
   };

   const signInWithGitHub = async () => {
      const { error } = await supabaseClient.auth.signInWithOAuth({
         provider: "github",
      });
      if (error) setError(error.message);
   };

   return (
      <div className="relative overflow-hidden">
         <Head>
            <title>{isLogin ? "Login" : "Sing Up"}</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
         </Head>
         <AuthBackground />
         <AuthContainer setError={setError}>
            <AuthHeader />
            <div className="text-light-text-normal">
               {isLogin
                  ? "Login to your account"
                  : "Sign Up today to start saving your lists!"}
            </div>
            <div className="border-b border-gray-light pb-4 grid grid-cols-3 gap-1 sm:gap-2">
               <SocialLogin
                  provider="google"
                  logo={google}
                  onClick={signInWithGoogle}
               />
               <SocialLogin
                  provider="LinkedIn"
                  logo={linkedin}
                  onClick={() => {}}
               />
               <SocialLogin
                  provider="github"
                  logo={github}
                  onClick={signInWithGitHub}
               />
            </div>
            <FormikForm
               isLogin={isLogin}
               toggleType={toggle}
               submitHandler={isLogin ? loginHandler : signUpHandler}
            />
            <SkipButton />
         </AuthContainer>
         <ConfirmEmailModal
            isOpen={showModal}
            close={closeModal}
            email={emailSent}
         />
         <AuthErrorMessage error={error} setError={setError} />
      </div>
   );
}
